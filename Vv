def sanitize_value(value: Any, field_type: str) -> str:
    if value is None:
        return "NULL"
    
    field_type = field_type.upper()
    
    # Handle list of values (for IN operator)
    if isinstance(value, list):
        sanitized_values = []
        for v in value:
            if field_type in ('NUMBER', 'INTEGER', 'INT', 'FLOAT', 'DECIMAL'):
                try:
                    float(v)
                    sanitized_values.append(str(v))
                except ValueError:
                    raise ValueError(f"Invalid numeric value: {v}")
            elif field_type in ('BOOLEAN', 'BOOL'):
                sanitized_values.append(str(v).lower())
            elif field_type in ('DATETIME', 'DATE', 'TIMESTAMP'):
                sanitized_values.append(f"TO_TIMESTAMP('{v}')")
            else:
                # Escape single quotes in string values
                sanitized_values.append(f"'{str(v).replace("'", "''")}'")
        return f"({', '.join(sanitized_values)})"
    
    # Handle single value
    if field_type in ('NUMBER', 'INTEGER', 'INT', 'FLOAT', 'DECIMAL'):
        try:
            float(value)
            return str(value)
        except ValueError:
            raise ValueError(f"Invalid numeric value: {value}")
    
    if field_type in ('BOOLEAN', 'BOOL'):
        return str(value).lower()
    
    if field_type in ('DATETIME', 'DATE', 'TIMESTAMP'):
        return f"TO_TIMESTAMP('{value}')"
    
    if field_type == 'ARRAY' and isinstance(value, str):
        if value.startswith('[') and value.endswith(']'):
            return value
        return f"[{value}]"
    
    # Escape single quotes in string values
    return f"'{str(value).replace("'", "''")}'"
